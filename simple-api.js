#!/usr/bin/env node

/**
 * Simple API Execution Script
 * 
 * A simplified, user-friendly script for testing the chess tournament API.
 * Supports both command-line and interactive modes.
 */

const https = require('https');
const http = require('http');
const readline = require('readline');

// Configuration
const config = {
  apiBaseUrl: 'http://localhost:3001',
  username: 'admin',
  password: 'admin123',
  tournamentId: null,
  apiKey: null,
  token: null
};

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Utility functions
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function success(message) {
  log(`✅ ${message}`, 'green');
}

function error(message) {
  log(`❌ ${message}`, 'red');
}

function info(message) {
  log(`ℹ️  ${message}`, 'blue');
}

function warn(message) {
  log(`⚠️  ${message}`, 'yellow');
}

// HTTP request helper
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    if (options.body) {
      const data = JSON.stringify(options.body);
      requestOptions.headers['Content-Length'] = Buffer.byteLength(data);
    }

    const req = client.request(requestOptions, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({
            status: res.statusCode,
            data: parsed,
            headers: res.headers
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            data: responseData,
            headers: res.headers
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

// API Functions
async function testConnection() {
  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/players/test`);
    if (response.status === 200 && response.data.success) {
      success('API connection successful');
      return true;
    } else {
      error(`API connection failed: ${response.data.error || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    error(`API connection error: ${error.message}`);
    return false;
  }
}

async function login() {
  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/auth/login`, {
      method: 'POST',
      body: {
        username: config.username,
        password: config.password
      }
    });

    if (response.status === 200 && response.data.success) {
      config.token = response.data.data.token;
      success(`Login successful as ${response.data.data.user.username} (${response.data.data.user.role})`);
      return response.data.data;
    } else {
      error(`Login failed: ${response.data.error || 'Unknown error'}`);
      return null;
    }
  } catch (error) {
    error(`Login error: ${error.message}`);
    return null;
  }
}

async function generateApiKey(authData) {
  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/users/${authData.user.id}/api-key`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${authData.token}`
      },
      body: {
        name: 'Simple API Key',
        description: 'Generated by simple API script',
        permissions: 'read,write',
        rate_limit: 1000
      }
    });

    if (response.status === 200 && response.data.success) {
      config.apiKey = response.data.data.api_key;
      success(`API key generated: ${config.apiKey.substring(0, 20)}...`);
      return config.apiKey;
    } else {
      error(`API key generation failed: ${response.data.error || 'Unknown error'}`);
      return null;
    }
  } catch (error) {
    error(`API key generation error: ${error.message}`);
    return null;
  }
}

async function registerPlayer(playerData) {
  if (!config.tournamentId) {
    error('Tournament ID is required');
    return false;
  }

  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/players/register/${config.tournamentId}`, {
      method: 'POST',
      body: {
        api_key: config.apiKey,
        ...playerData
      }
    });

    if (response.status === 200 && response.data.success) {
      success(`Player registered: ${response.data.data.player.name} (ID: ${response.data.data.player_id})`);
      return response.data.data;
    } else {
      error(`Registration failed: ${response.data.error || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    error(`Registration error: ${error.message}`);
    return false;
  }
}

async function bulkRegisterPlayers(players) {
  if (!config.tournamentId) {
    error('Tournament ID is required');
    return false;
  }

  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/players/api-import/${config.tournamentId}`, {
      method: 'POST',
      body: {
        api_key: config.apiKey,
        players: players,
        lookup_ratings: true,
        auto_assign_sections: true,
        source: 'simple_api'
      }
    });

    if (response.status === 200 && response.data.success) {
      success(`Bulk registration successful: ${response.data.data.imported_count} players imported`);
      return response.data.data;
    } else {
      error(`Bulk registration failed: ${response.data.error || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    error(`Bulk registration error: ${error.message}`);
    return false;
  }
}

async function getPlayers() {
  if (!config.tournamentId) {
    error('Tournament ID is required');
    return false;
  }

  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/players/tournament/${config.tournamentId}`);

    if (response.status === 200 && response.data.success) {
      const players = response.data.data;
      success(`Retrieved ${players.length} players`);
      
      // Show first 5 players
      players.slice(0, 5).forEach(player => {
        info(`  - ${player.name} (${player.rating || 'No rating'}) - ${player.section || 'No section'}`);
      });
      
      if (players.length > 5) {
        info(`  ... and ${players.length - 5} more players`);
      }
      
      return players;
    } else {
      error(`Failed to get players: ${response.data.error || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    error(`Get players error: ${error.message}`);
    return false;
  }
}

async function getTournamentInfo() {
  if (!config.tournamentId) {
    error('Tournament ID is required');
    return false;
  }

  try {
    const response = await makeRequest(`${config.apiBaseUrl}/api/players/tournament/${config.tournamentId}/registration-info?api_key=${config.apiKey}`);

    if (response.status === 200 && response.data.success) {
      const data = response.data.data;
      success(`Tournament: ${data.tournament.name}`);
      info(`  Format: ${data.tournament.format}`);
      info(`  Supported fields: ${data.supported_fields.length}`);
      return data;
    } else {
      error(`Failed to get tournament info: ${response.data.error || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    error(`Get tournament info error: ${error.message}`);
    return false;
  }
}

// Quick test functions
async function quickTest() {
  log('\n🚀 Running Quick API Test', 'bright');
  log('========================', 'bright');

  // Test connection
  if (!(await testConnection())) {
    return false;
  }

  // Login
  const authData = await login();
  if (!authData) {
    return false;
  }

  // Generate API key
  const apiKey = await generateApiKey(authData);
  if (!apiKey) {
    return false;
  }

  // Get tournament info
  if (config.tournamentId) {
    await getTournamentInfo();
  } else {
    warn('No tournament ID provided - skipping tournament tests');
  }

  success('Quick test completed successfully!');
  return true;
}

// Interactive mode
async function interactiveMode() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  const question = (prompt) => new Promise(resolve => rl.question(prompt, resolve));

  log('\n🎮 Interactive API Mode', 'bright');
  log('======================', 'bright');

  // Setup
  if (!config.apiKey) {
    info('Setting up authentication...');
    if (!(await testConnection())) {
      rl.close();
      return;
    }

    const authData = await login();
    if (!authData) {
      rl.close();
      return;
    }

    await generateApiKey(authData);
  }

  while (true) {
    log('\nAvailable commands:', 'cyan');
    log('1. Test connection');
    log('2. Register single player');
    log('3. Bulk register players');
    log('4. Get players');
    log('5. Get tournament info');
    log('6. Set tournament ID');
    log('7. Exit');

    const choice = await question('\nEnter your choice (1-7): ');

    switch (choice) {
      case '1':
        await testConnection();
        break;
      case '2':
        const name = await question('Player name: ');
        const uscfId = await question('USCF ID (optional): ');
        const rating = await question('Rating (optional): ');
        const section = await question('Section (optional): ');
        
        await registerPlayer({
          name,
          uscf_id: uscfId || undefined,
          rating: rating ? parseInt(rating) : undefined,
          section: section || undefined, // Section is optional - can be auto-assigned
          school: 'Test School',
          email: 'test@example.com'
        });
        break;
      case '3':
        const playerCount = await question('Number of players to register: ');
        const players = [];
        for (let i = 1; i <= parseInt(playerCount); i++) {
          players.push({
            name: `Test Player ${i}`,
            uscf_id: `1000000${i}`,
            rating: 1200 + (i * 100),
            section: 'Open',
            school: 'Test Academy'
          });
        }
        await bulkRegisterPlayers(players);
        break;
      case '4':
        await getPlayers();
        break;
      case '5':
        await getTournamentInfo();
        break;
      case '6':
        const tournamentId = await question('Tournament ID: ');
        config.tournamentId = tournamentId;
        success(`Tournament ID set to: ${tournamentId}`);
        break;
      case '7':
        rl.close();
        return;
      default:
        warn('Invalid choice. Please try again.');
    }
  }
}

// Command line interface
function parseArgs() {
  const args = process.argv.slice(2);
  
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--url':
        config.apiBaseUrl = args[++i];
        break;
      case '--username':
        config.username = args[++i];
        break;
      case '--password':
        config.password = args[++i];
        break;
      case '--tournament':
        config.tournamentId = args[++i];
        break;
      case '--interactive':
      case '-i':
        return 'interactive';
      case '--test':
      case '-t':
        return 'test';
      case '--help':
      case '-h':
        showHelp();
        process.exit(0);
        break;
    }
  }
  
  return 'test'; // Default to test mode
}

function showHelp() {
  log(`
Simple API Execution Script

Usage: node simple-api.js [options] [mode]

Options:
  --url <url>           API base URL (default: http://localhost:3001)
  --username <user>     Username for authentication
  --password <pass>     Password for authentication
  --tournament <id>     Tournament ID for testing

Modes:
  --interactive, -i     Interactive mode (default if no mode specified)
  --test, -t            Quick test mode
  --help, -h            Show this help

Examples:
  node simple-api.js --interactive
  node simple-api.js --test --tournament 123
  node simple-api.js --url https://api.example.com --username admin --password admin123
`, 'cyan');
}

// Main execution
async function main() {
  const mode = parseArgs();
  
  log('Simple API Execution Script', 'bright');
  log('===========================', 'bright');
  log(`API URL: ${config.apiBaseUrl}`, 'blue');
  log(`Username: ${config.username}`, 'blue');
  log(`Tournament ID: ${config.tournamentId || 'Not set'}`, 'blue');
  
  try {
    if (mode === 'interactive') {
      await interactiveMode();
    } else {
      await quickTest();
    }
  } catch (error) {
    error(`Execution failed: ${error.message}`);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = {
  makeRequest,
  testConnection,
  login,
  generateApiKey,
  registerPlayer,
  bulkRegisterPlayers,
  getPlayers,
  getTournamentInfo
};
